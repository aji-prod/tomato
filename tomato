#!/bin/sh
NAME=$(basename ${0:-tomato})
VERSION=0.1.0
readonly NAME
readonly VERSION

TOMATO_NAME="${TOMATO_NAME:-tomato}"
TOMATO_PKGDIR="${TOMATO_PKGDIR:-/var/pkg/tomato}"
TOMATO_IMGDIR="${TOMATO_IMGDIR:-/usr/share/tomato}"
TOMATO_PACDIR="${TOMATO_PACDIR:-/etc/pacman.d}"
TOMATO_MAKEPKGCONF="${TOMATO_MAKEPKGCONF}"
TOMATO_PKGCACHEDIR="${TOMATO_PKGCACHEDIR:-/var/cache/pacman/pkg}"

PACMAN=${PACMAN:-pacman}

# The configuration documentation ensures that the TOMATO_NAME can never be
# set as blank, let to enforce that.
if test -z "${TOMATO_NAME}"
then
	TOMATO_NAME="${NAME}"
fi

# -- Colors
ERROR="\033[0;31m"
HINT="\033[1;33m"
RESET="\033[0m"

_echo2(){
	>&2 echo $@
}

_error(){
	if test -t 2;
	then
		_echo2 -n -e ${ERROR}
		_echo2 $*
		_echo2 -n -e ${RESET}
	else
		_echo2 $*
	fi
	exit 1
}

_hint(){
	if test -t 2;
	then
		_echo2 -n -e ${HINT}
		_echo2 $*
		_echo2 -n -e ${RESET}
	else
		_echo2 $*
	fi
}

_loadconf(){
	# see: https://web.archive.org/web/20180406004235/
	#      http://mywiki.wooledge.org:80/BashFAQ/024
	if test -f "$1";
	then
		_hint "Loading config from $1"
		while IFS== read -r v;
		do
			if $(echo $v | grep -q -s -E -e "^[A-Z_]+=.*$");
			then
				_hint  $v
				export $v
			fi
		done < "$1"
	fi
}

_volume(){
	if test -n "$1";
	then
		echo -n " -v $1:$2 "
	fi
}

_volumes(){
	_volume "${TOMATO_PKGDIR}" "/var/pkg/tomato"
	_volume "${TOMATO_PACDIR}" "/etc/pacman.d:ro"
	_volume "${TOMATO_PKGCACHEDIR}" "/var/cache/pacman/pkg"
	_volume "${TOMATO_MAKEPKGCONF}" "/home/tomato/makepkg.conf:ro"
}

_dockerd(){
	pidof dockerd 1> /dev/null 2> /dev/null ||
	_error "The Docker deamon is not running, " \
	       "you can try to run \`systemctl start docker\` " \
	       "before using ${NAME^}".
}

_docker(){
	_dockerd && /usr/bin/docker $@
}

_build(){
	test -n "${TOMATO_IMGDIR}" ||
	_error "The TOMATO_IMGDIR is not set, " \
	       "check your environment variable, or your tomato.conf file; " \
	       "this variable locates where the Dockerfile and its assets " \
	       "are."

	_docker build --rm --tag "${TOMATO_NAME}" "${TOMATO_IMGDIR}"
}

_remove(){
	_docker image rm "${TOMATO_NAME}"
}

_run(){
	image=$(_docker images --format="{{.Repository}}" "${TOMATO_NAME}") ||
		exit $?

	test "${image}" = "${TOMATO_NAME}" ||
	_error "The ${NAME^}'s Docker image is not yet built, " \
	       "re-run the command with the --rebuild-image flag."

	tty=""
	if test "$1" = "--tty";
	then
		# activate the --tty option only when an stdin is available
		if test -t 0;
		then
			tty="$1"
		fi
		shift
	fi

	vol=$(_volumes)
	_docker run --rm --interactive $tty $vol "${TOMATO_NAME}" $@
}

_tomato(){
	ver=$(_run version number) || exit $?
	test "${ver}" = "${VERSION}" ||
	_hint "WARNING: the ${NAME^}'s Docker image is not up to date, " \
	      "version ${ver} found instead of ${VERSION}; " \
	      "use the --rebuild-image flag with the next command to upgrade."

	# pass the --tty option here only, and do not include in the _run()
	# command as the $(_run version number) will be scrambled.
	_run --tty $@
}

_environment(){
	load=("/etc/tomato.conf" "${HOME}/.config/tomato.conf")
	for at in ${load};
	do
		test -f "${at}" && _loadconf "${at}"
	done
}


_options(){
	# out
	args=()
	rebuild=0
	update=0
	remove=0
	# flags
	i=0
	loadconf=0
	version=0

	for arg in $@;
	do
		case ${arg} in
			--rebuild-image)
				rebuild=1
				;;
			--remove-image)
				remove=1
				;;
			--tomato-config=*)
				_loadconf "${arg#--tomato-config=}"
				;;
			--tomato-config)
				loadconf=1
				;;
			-Syu)
				update=1
				;;
			-VV)
				version=1
				;;
			*)
				if test ${loadconf} -eq 1;
				then
					loadconf=0
					_loadconf "${arg}"
				else
					args[$i]="${arg}"
					i=$(( $i + 1 ))
				fi
				;;
		esac
	done

	export args
	export remove
	export rebuild
	export update
	export version
}

main(){
	_environment
	_options $@

	if test ${version} -eq 1;
	then
		echo $VERSION
		return 0
	fi

	quitifnoargs=0
	if test ${remove} -eq 1;
	then
		_remove && _hint "${TOMATO_NAME} image removed."
		quitifnoargs=1

	fi
	if test ${rebuild} -eq 1;
	then
		_build && _hint "${TOMATO_NAME} image rebuilt."
		quitifnoargs=1
	fi

	if test ${#args[@]} -eq 0 -a ${quitifnoargs} -eq 1;
	then
		# no arguments provided, exit here
		return 0
	elif test ${update} -eq 1;
	then
		${PACMAN} -Syuuw && _tomato ${args[@]} && ${PACMAN} -Syuu
	else
		_tomato ${args[@]}
	fi
}

main $@
exit $?
