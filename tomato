#!/bin/sh
NAME=$(basename ${0:-tomato})
VERSION=0.9.0
readonly NAME
readonly VERSION

TOMATO_NAME="${TOMATO_NAME:-tomato}"
TOMATO_PKGDIR="${TOMATO_PKGDIR:-/var/pkg/tomato}"
TOMATO_IMGDIR="${TOMATO_IMGDIR:-/usr/share/tomato/image}"
TOMATO_MIRRORLIST="${TOMATO_MIRRORLIST:-/etc/pacman.d/mirrorlist}"
TOMATO_MAKEPKGCONF="${TOMATO_MAKEPKGCONF}"
TOMATO_PKGCACHEDIR="${TOMATO_PKGCACHEDIR:-/var/cache/pacman/pkg}"
TOMATO_EDITOR="${TOMATO_EDITOR:-${EDITOR:-extra/vim:/usr/bin/vim}}"
TOMATO_ULIMIT="${TOMATO_ULIMIT:-nofile=1024:524288}"

PACMAN=${PACMAN:-pacman}

# The configuration documentation ensures that the TOMATO_NAME can never be
# set as blank, let to enforce that.
if test -z "${TOMATO_NAME}"
then
	TOMATO_NAME="${NAME}"
fi

# -- Colors
ERROR="\033[0;31m"
HINT="\033[1;33m"
RESET="\033[0m"

_echo2(){
	>&2 echo $@
}

_error(){
	if test -t 2;
	then
		_echo2 -n -e ${ERROR}
		_echo2 $*
		_echo2 -n -e ${RESET}
	else
		_echo2 $*
	fi
	exit 1
}

_hint(){
	if test -t 2;
	then
		_echo2 -n -e ${HINT}
		_echo2 $*
		_echo2 -n -e ${RESET}
	else
		_echo2 $*
	fi
}

_mirrorlist(){
	default_mirror=''

	if test -n "$1" -a $1 -ne 0;
	then
		echo "${default_mirror}"
		return
	fi

	if test -x "/usr/bin/rankmirrors";
	then
		/usr/bin/rankmirrors -n 1 -m 1 -r core "${TOMATO_MIRRORLIST}" | \
			grep -h -G -e "^Server *=" && return
	fi

	grep -h -G -e "^Server *=" -- "${TOMATO_MIRRORLIST}" | while read server;
	do
		name="$(echo "${server}" | cut -d / -f 3 --)"
		ping -c 1 -W 1 -q -- "${name}" 2>&1 >/dev/null && echo "${server}" && return
	done

	echo "${default_mirror}"
}

_loadconf(){
	# see: https://web.archive.org/web/20180406004235/
	#      http://mywiki.wooledge.org:80/BashFAQ/024
	if test -f "$1";
	then
		_hint "Loading config from $1"
		while IFS= read -r v;
		do
			if $(echo $v | grep -q -s -E -e "^[A-Z_]+=.*$");
			then
				_hint  $v
				export $v
			fi
		done < "$1"
	fi
}

_volume(){
	if test -n "$1";
	then
		echo -n " -v $1:$2 "
	fi
}

_volumes(){
	_volume "${TOMATO_PKGDIR}" "/var/pkg/tomato"
	_volume "${TOMATO_MIRRORLIST}" "/home/tomato/mirrorlist:ro"
	_volume "${TOMATO_PKGCACHEDIR}" "/var/cache/pacman/pkg"
	_volume "${TOMATO_MAKEPKGCONF}" "/home/tomato/makepkg.conf:ro"
}

_dockerd(){
	pidof dockerd 1> /dev/null 2> /dev/null ||
	_error "The Docker deamon is not running, " \
	       "you can try to run \`systemctl start docker\` " \
	       "before using ${NAME^}".
}

_docker(){
	_dockerd && /usr/bin/docker "$@"
}

_id(){
	_docker image ls --filter reference="${TOMATO_NAME}:latest" --format {{.ID}}
}

_build(){
	test -n "${TOMATO_IMGDIR}" ||
	_error "The TOMATO_IMGDIR is not set, " \
	       "check your environment variable, or your tomato.conf file; " \
	       "this variable locates where the Dockerfile and its assets " \
	       "are."

	editor="TOMATO_EDITOR=${TOMATO_EDITOR}"
	mirror="TOMATO_MIRROR=$(_mirrorlist $1)"
	nofile="${TOMATO_ULIMIT:+--ulimit ${TOMATO_ULIMIT}}"

	oldimage=$(_id)
	_docker build \
		${nofile} \
		--build-arg "${editor}" \
		--build-arg "${mirror}" \
		--rm --tag "${TOMATO_NAME}" "${TOMATO_IMGDIR}" && \
		(test "${oldimage}" = "$(_id)" || _remove "${oldimage}")
}

_remove(){
	if test -n "$1";
	then
		_docker image rm "$1"
	fi
}

_which(){
	/usr/bin/which -- "$1" 2> /dev/null || 
		echo -n $1
}

_run(){
	image=$(_docker images --format="{{.Repository}}" "${TOMATO_NAME}") ||
		exit $?

	test "${image}" = "${TOMATO_NAME}" ||
	_error "The ${NAME^}'s Docker image is not yet built, " \
	       "re-run the command with the --rebuild-image flag."

	tty=""
	if test "$1" = "--tty";
	then
		# activate the --tty option only when an stdin is available
		if test -t 0;
		then
			tty="$1"
		fi
		shift
	fi

	editor="_TOMATO_EDITOR=$(_which ${TOMATO_EDITOR})"
	vol=$(_volumes)
	nofile="${TOMATO_ULIMIT:+--ulimit ${TOMATO_ULIMIT}}"
	_docker run --rm --interactive ${tty} ${nofile} --env "${editor}" ${vol} "${TOMATO_NAME}" $@
}

_attach(){
	image=$(_docker ps \
		--latest \
		--filter "ancestor=${TOMATO_NAME}" \
		--filter "status=running" \
		--format {{.ID}})

	test -n "${image}" && (
	_hint "Attaching ${NAME} to the current running docker...";
	_docker attach "${image}" 2> /dev/null)
}

_tomato(){
	ver=$(_run version number) || exit $?
	test "${ver}" = "${VERSION}" ||
	_hint "WARNING: the ${NAME^}'s Docker image is not up to date, " \
	      "version ${ver} found instead of ${VERSION}; " \
	      "use the --rebuild-image flag with the next command to upgrade."

	# pass the --tty option here only, and do not include in the _run()
	# command as the $(_run version number) will be scrambled.
	( test -z "$*" && _attach ) || _run --tty $@
}

_environment(){
	load=("/etc/tomato.conf" "${HOME}/.config/tomato.conf")
	for at in ${load};
	do
		test -f "${at}" && _loadconf "${at}"
	done
}

_update(){
	pkgname=$(python -I - <<EOF
from collections import namedtuple

GITHUB_RELEASES_API = "https://api.github.com/repos/aji-prod/tomato/releases"

TomatoRelease = namedtuple(
    "TomatoRelease", ["name", "version", "filename", "size", "url"]
)


def fetch_latest_tomato_release():
    from fnmatch import fnmatch
    from urllib.request import urlopen
    import json

    releases = None
    with urlopen(GITHUB_RELEASES_API) as data:
        releases = json.loads(data.read())

    latest = next(
        (rel for rel in releases if not rel["prerelease"] and not rel["draft"])
    )
    name = latest["name"]
    version = latest["tag_name"]
    pkg = next(
        (pkg for pkg in latest["assets"] if fnmatch(pkg["name"], "tomato-*.pkg.tar.*"))
    )
    filename = pkg["name"]
    size = pkg["size"]
    url = pkg["browser_download_url"]

    return TomatoRelease(name, version, filename, size, url)


def download_tomato_release(tomato):
    from tempfile import mkdtemp
    from urllib.request import urlopen
    import os.path

    tempdir = mkdtemp(prefix="tomato-")
    with urlopen(tomato.url) as pkg:
        filename = os.path.join(tempdir, tomato.filename)
        with open(filename, "wb") as f:
            f.write(pkg.read())
        return filename


if __name__ == "__main__":
    import sys

    release = fetch_latest_tomato_release()
    print("Fetching", release.version, file=sys.stderr)
    print("Name\t", release.name, file=sys.stderr)
    print("Package\t", release.filename, file=sys.stderr)
    print("URL\t", release.url, file=sys.stderr)
    filename = download_tomato_release(release)
    print("Download", filename, file=sys.stderr)
    print(filename)
EOF
)
	if test -n "${pkgname}"
	then
		_hint "${TOMATO_NAME^} will be updated from: ${pkgname}"
		pacman -U "${pkgname}" ||
			( (command -v sudo >/dev/null) && sudo pacman -U "${pkgname}") ||
			( (command -v doas >/dev/null) && doas pacman -U "${pkgname}")
	fi
}


_options(){
	# out
	args=()
	rebuild=0
	update=0
	update_flag=""
	remove=0
	# flags
	i=0
	loadconf=0
	version=0
	default_mirrors=0
	remote_update=0
	remote_updated=0

	for arg in $@;
	do
		case ${arg} in
			--rebuild-image)
				rebuild=1
				;;
			--remove-image)
				remove=1
				;;
			--remote-update)
				remote_update=1
				;;
			--remote-updated)
				remote_updated=1
				;;
			--tomato-config=*)
				_loadconf "${arg#--tomato-config=}"
				;;
			--tomato-config)
				loadconf=1
				;;
			--default-mirror|--default-mirrors)
				default_mirrors=1
				;;
			-S*y*u*|-S*u*y*)
				update=1
				update_flag="${arg}"
				;;
			-VV)
				version=1
				;;
			*)
				if test ${loadconf} -eq 1;
				then
					loadconf=0
					_loadconf "${arg}"
				else
					args[$i]="${arg}"
					i=$(( $i + 1 ))
				fi
				;;
		esac
	done

	export args
	export remove
	export rebuild
	export update
	export update_flag
	export version
	export default_mirrors
	export remote_update
	export remote_updated
}

main(){
	_environment
	_options $@

	if test ${version} -eq 1;
	then
		echo $VERSION
		return 0
	fi

	quitifnoargs=${remote_updated}
	if test ${remote_update} -eq 1 -a ${remote_updated} -eq 0;
	then
		# update and execute into the new environment
		_hint "WARNING: ${TOMATO_NAME^} will be updated from a remote source, " \
		      "to use only if ${TOMATO_NAME^} is broken."
		_hint "NOTICE:  To self update ${TOMATO_NAME^}, use: " \
		      "${TOMATO_NAME} add ${TOMATO_NAME}"
		if _update;
		then
			"$0" --remote-updated $@; 
			exit $?
		fi
		quitifnoargs=1
	fi
	if test ${remove} -eq 1;
	then
		_remove "${TOMATO_NAME}" && _hint "${TOMATO_NAME} image removed."
		quitifnoargs=1

	fi
	if test ${rebuild} -eq 1;
	then
		_build ${default_mirrors} && _hint "${TOMATO_NAME} image rebuilt."
		quitifnoargs=1
	fi

	if test ${#args[@]} -eq 0 -a ${quitifnoargs} -eq 1;
	then
		# no arguments provided, exit here
		return 0
	elif test ${update} -eq 1;
	then
		_hint "Refresh and upgrade host packages (${update_flag})"
		${PACMAN} ${update_flag}w && _tomato refresh ${args[@]} && ${PACMAN} ${update_flag}
	else
		_tomato ${args[@]}
	fi
}

main $@
exit $?
